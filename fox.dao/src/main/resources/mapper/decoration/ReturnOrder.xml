<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace = "com.minutch.fox.dao.decoration.ReturnOrderDao">

    <resultMap id = "BaseResultMap" type = "com.minutch.fox.entity.decoration.ReturnOrder"
               extends = "COMMON.BASE_RESULT_MAP">
        <result column = "order_id" property = "orderId" />
        <result column = "goods_num" property = "goodsNum" />
        <result column = "order_amount" property = "orderAmount" />
        <result column = "store_id" property = "storeId" />
        <result column = "emp_id" property = "empId" />
        <result column = "remark" property = "remark" />
    </resultMap>

    <resultMap id = "returnOrderViewMap" type = "com.minutch.fox.view.decoration.OrderView">
        <result column = "id" property = "id" />
        <result column = "gmt_create" property = "gmtCreate" />
        <result column = "goods_num" property = "goodsNum" />
        <result column = "order_amount" property = "orderAmount" />

        <result column = "header_id" property = "headerId" />
        <result column = "order_sn" property = "orderSn" />
        <result column = "cus_id" property = "cusId" />
        <result column = "cus_name" property = "cusName" />
        <result column = "mobile_phone" property = "mobilePhone" />
        <result column = "house_name" property = "houseName" />
        <result column = "address" property = "address" />

        <result column = "goods_id" property = "goodsId" />
        <result column = "goods_name" property = "goodsName" />
        <result column = "goods_model" property = "goodsModel" />
        <result column = "goods_price" property = "goodsPrice" />

    </resultMap>



    <sql id = "BaseWhereClause">
        <where>
            <trim prefixOverrides = "and">
                <include refid = "COMMON.BASE_WHERE_CLAUSE" />
                <if test = "orderId != null">
                    and order_id = #{orderId}
                </if>
                <if test = "goodsNum != null">
                    and goods_num = #{goodsNum}
                </if>
                <if test = "orderAmount != null">
                    and order_amount = #{orderAmount}
                </if>
                <if test = "storeId != null">
                    and store_id = #{storeId}
                </if>
                <if test = "empId != null">
                    and emp_id = #{empId}
                </if>
                <if test = "remark != null">
                    and remark = #{remark}
                </if>
            </trim>
        </where>
    </sql>

    <sql id = "BaseUpdateSet">
        <set>
            <include refid = "COMMON.BASE_UPDATE_SET" />
            <if test = "orderId != null">
                order_id = #{orderId},
            </if>
            <if test = "goodsNum != null">
                goods_num = #{goodsNum},
            </if>
            <if test = "orderAmount != null">
                order_amount = #{orderAmount},
            </if>
            <if test = "storeId != null">
                store_id = #{storeId},
            </if>
            <if test = "empId != null">
                emp_id = #{empId},
            </if>
            <if test = "remark != null">
                remark = #{remark}
            </if>
        </set>
    </sql>

    <!-- 查询总数 -->
    <select id = "selectCount" resultType = "java.lang.Integer">
        select count(id)
        from decoration_return_order
        <include refid = "BaseWhereClause" />
    </select>

    <!-- 查询 -->
    <select id = "select" resultMap = "BaseResultMap">
        select
        <include refid = "COMMON.ALL_COLUMN_LIST" />
        from decoration_return_order
        <include refid = "BaseWhereClause" />
        <include refid = "COMMON.ORDER_BY" />
        <include refid = "COMMON.LIMIT" />
    </select>

    <!-- 根据ID查询 -->
    <select id = "selectById" resultMap = "BaseResultMap">
        select
        <include refid = "COMMON.ALL_COLUMN_LIST" />
        from decoration_return_order
        where id = #{id}
    </select>

    <!-- 根据IDS批量删除 -->
    <update id = "deleteByIds">
        update decoration_return_order
        set is_deleted='Y'
        where id in
        (
        <foreach collection = "array" index = "index" item = "tag" separator = ",">
            #{tag}
        </foreach>
        )
    </update>

    <!-- 根据ID删除 -->
    <update id = "deleteById">
        update decoration_return_order
        set is_deleted='Y'
        where id=#{id}
    </update>

    <!-- 删除 -->
    <delete id = "delete">
        update decoration_return_order
        set is_deleted='Y'
        <include refid = "BaseWhereClause" />
    </delete>

    <!-- 添加   -->
    <insert id = "insert" useGeneratedKeys = "true" keyProperty = "id">
        insert into decoration_return_order (
        <include refid = "COMMON.BASE_INSERT_COLUMN" />
        order_id,
        goods_num,
        order_amount,
        store_id,
        emp_id,
        remark
        )
        values (
        <include refid = "COMMON.BASE_INSERT_VALUE" />
        #{orderId},
        #{goodsNum},
        #{orderAmount},
        #{storeId},
        #{empId},
        #{remark}
        )
    </insert>

    <!-- 通过ID更新 -->
    <update id = "updateById">
        update decoration_return_order
        <include refid = "BaseUpdateSet" />
        where id = #{id}
    </update>


    <!-- 根据条件查询订单总数 -->
    <select id="queryReturnOrderCount" resultType="java.lang.Integer">
        select count(r.id)
        from decoration_return_order r
        join decoration_order o
        on r.order_id = o.id
        join decoration_order_header h
        on o.header_id=h.id
        where o.is_deleted = 'N'
        and r.is_deleted = 'N'
        and h.is_deleted = 'N'
        <include refid="queryReturnOrderCond" />
    </select>

    <!-- 根据条件查询订单数据 -->
    <select id="queryReturnOrder" resultMap="returnOrderViewMap">
        select
        <include refid="returnOrderViewColumn"/>
        from decoration_return_order r
        join decoration_order o
        on r.order_id = o.id
        join decoration_order_header h
        on o.header_id=h.id
        where o.is_deleted = 'N'
        and r.is_deleted = 'N'
        and h.is_deleted = 'N'
        <include refid="queryReturnOrderCond" />
        order by r.id desc
        limit #{start},#{limit}
    </select>


    <sql id="queryReturnOrderCond">
        and o.store_id = #{param.storeId}
        and r.store_id = #{param.storeId}
        and h.store_id = #{param.storeId}
    </sql>

    <sql id="returnOrderViewColumn">

        r.id,
        r.gmt_create,
        r.goods_num,
        r.order_amount,

        h.id as header_id,
        h.order_sn,
        h.cus_id,
        h.cus_name,
        h.mobile_phone,
        h.house_name,
        h.address,

        o.goods_id,
        o.goods_name,
        o.goods_model,
        o.goods_price

    </sql>

    <select id="queryByHeaderId" resultMap="returnOrderViewMap">
        select
        <include refid="returnOrderViewColumn"/>
        from decoration_return_order r
        join decoration_order o
        on r.order_id = o.id
        join decoration_order_header h
        on o.header_id=h.id
        where o.is_deleted = 'N'
        and r.is_deleted = 'N'
        and h.is_deleted = 'N'
        and h.id = #{headerId}
    </select>

</mapper>
